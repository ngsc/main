diff --git a/.gitignore b/.gitignore
index 3be6ac7..1bdc0a3 100644
--- a/.gitignore
+++ b/.gitignore
@@ -4,4 +4,49 @@ moc_*.cpp
 moc_*.h
 /.qmake.stash
 *.pro.user
-Makefile*
\ No newline at end of file
+Makefile*
+/.vs/piece1_10_7_2016/v15/.suo
+/.vs/piece1_10_7_2016/v15/Browse.VC.db
+
+#Ignore thumbnails created by Windows
+Thumbs.db
+#Ignore files built by Visual Studio
+*.obj
+*.exe
+*.pdb
+*.user
+*.aps
+*.pch
+*.vspscc
+*_i.c
+*_p.c
+*.ncb
+*.suo
+*.tlb
+*.tlh
+*.bak
+*.cache
+*.ilk
+*.log
+[Bb]in
+[Dd]ebug*/
+*.lib
+*.sbr
+obj/
+[Rr]elease*/
+_ReSharper*/
+[Tt]est[Rr]esult*
+.vs/
+#Nuget packages folder
+packages/
+/debug/piece1_10_7_2016.exe
+/Makefile
+/Makefile.Debug
+/Makefile.Release
+/object_script.piece1_10_7_2016.Debug
+/time.txt
+/qml_qmlcache.qrc
+/piece1_10_7_2016.vcxproj
+/piece1_10_7_2016.sln
+/piece1_10_7_2016.vcxproj.filters
+/object_script.piece1_10_7_2016.Release
diff --git a/Monitor.qml b/Monitor.qml
index 74e0d22..65f1246 100644
--- a/Monitor.qml
+++ b/Monitor.qml
@@ -399,7 +399,8 @@ Rectangle
             running: false
 
             onTriggered: {
-                monitorControl.monitorStart();
+//                console.log("Monitor.qml.start timer triggered");
+//                monitorControl.monitorStart();
             }
         }
         Timer {
diff --git a/MonitorController.cpp b/MonitorController.cpp
index 2f69815..f2c315f 100644
--- a/MonitorController.cpp
+++ b/MonitorController.cpp
@@ -118,7 +118,7 @@ MonitorControl::connectMonitorTo( const char * hostname )
         // os << "Empty host name. Connection failed." << std::endl;
         return;
     }
-
+    std::cerr << "MonitorControl::connectMonitorTo before disconnectMonitor" << std::endl;
     disconnectMonitor();
 
     std::cerr << "Connect to [" << hostname << "] ..." << std::endl;
@@ -149,8 +149,9 @@ MonitorControl::connectMonitorTo( const char * hostname )
     Options::instance().setBufferRecoverMode( true );
 
     //     M_set_live_mode_act->setEnabled( true );
-
-    M_monitor_client->sendDispInit();
+	
+	// sent when TCP connnected callback called in monitor_client.cpp
+    // M_monitor_client->sendDispInit();
 }
 
 
@@ -165,6 +166,7 @@ MonitorControl::isConnected() const
 void
 MonitorControl::connectMonitor()
 {
+    std::cerr << "MonitorControl::connectMonitor() ..." << std::endl;
     connectMonitorTo();
 }
 /*-------------------------------------------------------------------*/
@@ -174,6 +176,7 @@ MonitorControl::connectMonitor()
 void 
 MonitorControl::monitorStart()
 {
+    std::cerr << "MonitorControl::monitorStart() ..." << std::endl;
     connectMonitor();
 }
 /*-------------------------------------------------------------------*/
@@ -239,6 +242,7 @@ void
 MonitorControl::connectMonitorTo()
 {
     //connectMonitorTo("192.168.43.119");
+    std::cerr << "MonitorControl::connectMonitorTo() ..." << std::endl;
     connectMonitorTo("173.208.200.82");
 }
 
@@ -251,6 +255,7 @@ MonitorControl::disconnectMonitor()
 {
     if ( M_monitor_client )
     {
+        std::cerr << "disconnectMonitor ..." << std::endl;
         M_monitor_client->disconnect();
 
         delete M_monitor_client;
@@ -600,7 +605,8 @@ MonitorControl::getMatchParams() {
     //M_side = //get from server
     //IF cannot get - return false
     port_no = 6000 + (10 * match_id);
-    Options::instance().setServerPort(port_no);
+    //PHP_GET get tcp port number form server
+    Options::instance().setServerPort(54002);
 	return true;
 }
 QString
diff --git a/monitor/include/monitor_client.h b/monitor/include/monitor_client.h
index 5395170..be5e45a 100644
--- a/monitor/include/monitor_client.h
+++ b/monitor/include/monitor_client.h
@@ -40,10 +40,11 @@
 
 //#include <winsock2.h>
 //#include <stdio.h>
+#include <time.h>
 
 class QHostInfo;
 class QTimer;
-class QUdpSocket;
+class QTcpSocket;
 class DispHolder;
 
 class MonitorClient
@@ -57,7 +58,11 @@ private:
 
     QHostAddress M_server_addr;
     quint16 M_server_port;
-    QUdpSocket * M_socket;
+    QTcpSocket * M_socket;
+    QMetaObject::Connection M_tcp_connection;
+    QByteArray M_recomposedPackage;
+
+    void error(QAbstractSocket::SocketError aError);
     //SOCKET m_sock;
     QTimer * M_timer;
 
@@ -172,7 +177,7 @@ public:
 
 private slots:
 
-    void handleReceive();
+    void handleTcpRecevied();
     void handleTimer();
 
 signals:
diff --git a/monitor/src/disp_holder.cpp b/monitor/src/disp_holder.cpp
index ce6c655..fc02b32 100644
--- a/monitor/src/disp_holder.cpp
+++ b/monitor/src/disp_holder.cpp
@@ -663,7 +663,11 @@ DispHolder::handleCommentaries( const std::string & msg )
 		return;
 	}
 	prev_comment = M_commentary;
-	const int current_time = currentDisp()->show_.time_;
+    int current_time = 0;
+    if(currentDisp())
+    {
+        int current_time = currentDisp()->show_.time_;
+    }
 	M_commentary_log << '\n'
 		<< std::setw(2)
 		<< std::setfill('0')
diff --git a/monitor/src/main_window.cpp b/monitor/src/main_window.cpp
index 6770724..172aa57 100644
--- a/monitor/src/main_window.cpp
+++ b/monitor/src/main_window.cpp
@@ -1043,6 +1043,7 @@ MonitorMainWindow::closeEvent( QCloseEvent * event )
 void
 MonitorMainWindow::connectMonitorTo( const char * hostname )
 {
+    std::cerr << "MonitorMainWindow::connectMonitorTo(const char) ..." << std::endl;
     if ( std::strlen( hostname ) == 0 )
     {
         std::cerr << "Empty host name. Connection failed." << std::endl;
@@ -1105,8 +1106,9 @@ MonitorMainWindow::connectMonitorTo( const char * hostname )
              this, SLOT( reconnectMonitor() ) );
 
 //     M_log_player->setLiveMode();
-
-    M_monitor_client->sendDispInit();
+	
+	// connecting in monitor client tcp connected callback
+    // M_monitor_client->sendDispInit();
 
     if ( QApplication::overrideCursor() )
     {
@@ -1260,6 +1262,7 @@ MonitorMainWindow::kickOff()
 void
 MonitorMainWindow::connectMonitor()
 {
+    std::cerr << "MonitorMainWindow::connectMonitor ..." << std::endl;
     std::string host = Options::instance().serverHost();
     if ( host.empty() )
     {
@@ -1278,6 +1281,7 @@ MonitorMainWindow::connectMonitor()
 void
 MonitorMainWindow::connectMonitorTo()
 {
+    std::cerr << "MonitorMainWindow::connectMonitorTo ..." << std::endl;
     std::string host = Options::instance().serverHost();
     if ( host.empty() )
     {
@@ -1309,6 +1313,7 @@ MonitorMainWindow::disconnectMonitor()
 {
     if ( M_monitor_client )
     {
+        std::cerr << "MonitorMainWindow::disconnectMonitor inside if ..." << std::endl;
         M_monitor_client->disconnect();
 
         disconnect( M_monitor_client, SIGNAL( received() ),
@@ -1337,6 +1342,7 @@ MonitorMainWindow::disconnectMonitor()
 
 //     M_set_live_mode_act->setEnabled( false );
     M_connect_monitor_act->setEnabled( true );
+    std::cerr << "MonitorMainWindow::disconnectMonitor before ...M_connect_monitor_to_act->setEnabled( true );" << std::endl;
     M_connect_monitor_to_act->setEnabled( true );
     M_disconnect_monitor_act->setEnabled( false );
 }
diff --git a/monitor/src/monitor_client.cpp b/monitor/src/monitor_client.cpp
index b43767a..12e0d0d 100644
--- a/monitor/src/monitor_client.cpp
+++ b/monitor/src/monitor_client.cpp
@@ -63,13 +63,44 @@ MonitorClient::MonitorClient( QObject * parent,
     : QObject( parent )
     , M_disp_holder( disp_holder )
     , M_server_port( static_cast< quint16 >( port ) )
-    , M_socket( new QUdpSocket( this ) )
+    , M_socket( new QTcpSocket( this ) )
     , M_timer( new QTimer( this ) )
     , M_version( version )
     , M_waited_msec( 0 )
+    , M_recomposedPackage()
 {
     assert( parent );
-
+    connect(
+        M_socket, &QAbstractSocket::hostFound,
+        []() { std::cerr << "M_socket::hostFound" << std::endl;}
+    );
+    connect(
+        M_socket, &QAbstractSocket::stateChanged,
+        [this](QAbstractSocket::SocketState a_state)
+            {
+                std::cerr << "M_socket::stateChanged " << a_state << std::endl;
+            }
+    );
+    connect(
+        M_socket, &QAbstractSocket::connected,
+        [this]()
+        {
+            std::cerr << "M_socket::connected" << std::endl;
+            M_server_port = M_socket->peerPort();
+            M_tcp_connection = connect( M_socket, SIGNAL( readyRead() ),
+                     this, SLOT( handleTcpRecevied() ) );
+            sendDispInit();
+        }
+    );
+    connect(
+        M_socket, &QAbstractSocket::disconnected,
+        [this]()
+        {
+            std::cerr << "M_socket::disconnected" << std::endl;
+            QObject::disconnect(M_tcp_connection);
+            //M_socket->close();
+        }
+    );
     // check protocl versin range
     if ( version < 1 )
     {
@@ -91,35 +122,16 @@ MonitorClient::MonitorClient( QObject * parent,
 
     M_server_addr = host.addresses().front();
 
-
-
-    //initSocket();
-    //startSocket();
-
-
-
-    // INADDR_ANY, bind random created port to local
-    if ( ! M_socket->bind( M_server_port ) )
+    M_socket->connectToHost( "173.208.200.82", M_server_port );
+    if( M_socket->waitForConnected(1000) )
     {
-        std::cerr << "MonitorClient. failed to bind the socket."
-                  << std::endl;
-        return;
+        qInfo() << "TCP socket conneted";
     }
-
-    if ( ! isConnected() )
+    else
     {
-        std::cerr << "MonitorClient. failed to initialize the socket."
-                  << std::endl;
-        return;
+        qInfo() << "Did not connect in 1 second";
     }
-
-    // setReadBufferSize() makes no effect for QUdpSocet...
-    // M_socket->setReadBufferSize( 8192 * 256 );
-
-
-    connect( M_socket, SIGNAL( readyRead() ),
-             this, SLOT( handleReceive() ) );
-    //QCoreApplication::sendPostedEvents();
+    std::cerr << "MonitorClient serverPort " << M_server_port << std::endl;
 
     connect( M_timer, SIGNAL( timeout() ),
              this, SLOT( handleTimer() ) );
@@ -127,6 +139,11 @@ MonitorClient::MonitorClient( QObject * parent,
 
 }
 
+void MonitorClient::error(QAbstractSocket::SocketError aError)
+{
+    std::cerr << "aError" << aError << std::endl;
+}
+
 void MonitorClient::initSocket() {
 //    WSADATA wsa;
 
@@ -204,6 +221,7 @@ MonitorClient::disconnect()
 
     if ( isConnected() )
     {
+        std::cerr << "MonitorClient::disconnectMonitor when connected ..." << std::endl;
         sendDispBye();
         M_socket->close();
     }
@@ -216,122 +234,84 @@ MonitorClient::disconnect()
 bool
 MonitorClient::isConnected() const
 {
+    //std::cerr << "MonitorClient::isConnected() " << M_socket->state() << (M_socket->socketDescriptor() != -1) << std::endl;
     return ( M_socket->socketDescriptor() != -1 );
 }
 
+
+std::string getCurrentTimestamp()
+{
+    using std::chrono::system_clock;
+    auto currentTime = std::chrono::system_clock::now();
+
+    auto transformed = currentTime.time_since_epoch().count() / 1000000;
+
+    auto millis = transformed % 1000;
+
+    std::time_t tt;
+    tt = system_clock::to_time_t ( currentTime );
+    auto timeinfo = gmtime (&tt);
+    char buf[40];
+    sprintf(buf, "%02ld:%02ld:%02ld.%03ld",
+    timeinfo->tm_hour, timeinfo->tm_min, timeinfo->tm_sec, millis);
+    return buf;
+}
+
+void
 /*-------------------------------------------------------------------*/
 /*!
 
 */
-void
-MonitorClient::handleReceive()
+MonitorClient::handleTcpRecevied()
 {
-    int receive_count = 0;
 
-    if ( M_version >= 3 )
+    std::cerr << "[" << getCurrentTimestamp() << "]" << "MonitorClient::::handleTcpRecevied begin" << std::endl;
+    std::cerr << "MonitorClient::::handleTcpRecevied bytes available " <<  M_socket->bytesAvailable() << std::endl;
+    if( M_socket->peerPort() != M_server_port )
     {
-        char buf[8192];
-
-        while ( M_socket->hasPendingDatagrams() )
-        {
-            quint16 from_port;
-            int n = M_socket->readDatagram( buf,
-                                            8192,
-                                            0, // QHostAddress*
-                                            &from_port );
-            if ( n > 0 )
-            {
-                buf[n] = '\0';
-                if ( ! M_disp_holder.addDispInfoV3( buf ) )
-                {
-                    std::cerr << "recv: " << buf << std::endl;
-                }
-
-                if ( from_port != M_server_port )
-                {
-                    std::cerr << "updated server port number = "
-                              << from_port
-                        //<< "  localPort = "
-                        //<< M_socket->localPort()
-                              << std::endl;
-
-                    M_server_port = from_port;
-                }
-            }
-            ++receive_count;
-        }
+        M_server_port = M_socket->peerPort();
     }
-    else if ( M_version == 2 )
+    QByteArray dataFragment = M_socket->readAll();
+    char endChar = '\0';
+    int index = 0;
+    while( dataFragment.indexOf(endChar) != -1 )
     {
-        rcss::rcg::dispinfo_t2 disp2;
-        while ( M_socket->hasPendingDatagrams() )
+        index = dataFragment.indexOf(endChar);
+        M_recomposedPackage += dataFragment.left(index+1); // including endChar
+        dataFragment = dataFragment.right( dataFragment.size() - (index + 1) );
+        std::cerr << "MonitorClient::::handleTcpRecevied endChar detected at " << index << " M_recomposedPackage " << M_recomposedPackage.length() << std::endl;
+        bool ok(false);
+        switch(M_version)
         {
-            quint16 from_port;
-            int n = M_socket->readDatagram( reinterpret_cast< char * >( &disp2 ),
-                                            sizeof( disp2 ),
-                                            0, // QHostAddress*
-                                            &from_port );
-            if ( n > 0 )
-            {
-                if ( ! M_disp_holder.addDispInfoV2( disp2 ) )
-                {
-                    std::cerr << "recv: "
-                              << reinterpret_cast< char * >( &disp2 )
-                              << std::endl;
-                }
-
-                if ( from_port != M_server_port )
-                {
-                    std::cerr << "updated server port number = "
-                              << from_port
-                        //<< "  localPort = "
-                        //<< M_socket->localPort()
-                              << std::endl;
-
-                    M_server_port = from_port;
-                }
-            }
-            ++receive_count;
+            case 1:
+                //TODO: convert to dispinfo format
+                //ok = M_disp_holder.addDispInfoV1( M_recomposedPackage.data() );
+                break;
+            case 2:
+                //ok = M_disp_holder.addDispInfoV2( M_recomposedPackage.data() );
+                break;
+            case 3:
+            default:
+                ok = M_disp_holder.addDispInfoV3( M_recomposedPackage );
         }
-    }
-    else if ( M_version == 1 )
-    {
-        rcss::rcg::dispinfo_t disp1;
-        while ( M_socket->hasPendingDatagrams() )
+        if(ok)
         {
-            quint16 from_port;
-            int n =  M_socket->readDatagram( reinterpret_cast< char * >( &disp1 ),
-                                             sizeof( disp1 ),
-                                             0, // QHostAddress*
-                                             &from_port );
-            if ( n > 0 )
-            {
-                if ( ! M_disp_holder.addDispInfoV1( disp1 ) )
-                {
-                    std::cerr << "recv: "
-                              << reinterpret_cast< char * >( &disp1 )
-                              << std::endl;
-                }
-
-                if ( from_port != M_server_port )
-                {
-                    std::cerr << "updated port number = "
-                              << from_port << std::endl;
-
-                    M_server_port = from_port;
-                }
-            }
-            ++receive_count;
+            emit received();
         }
-    }
+        else
+        {
+            std::cerr << " Error when proccessing message: " << M_recomposedPackage.data() << std::endl;
+        }
+        M_recomposedPackage = QByteArray();
 
-    if ( receive_count > 0 )
-    {
-        M_waited_msec = 0;
-        M_timer->start( POLL_INTERVAL_MS );
 
-        emit received();
     }
+    if(dataFragment.length() > 0)
+    {
+        //dataFragment has not endChar, dataFragment is the beginning of unfinished message
+        M_recomposedPackage = dataFragment;
+    }
+    std::cerr << "MonitorClient::::handleTcpRecevied end" << std::endl;
 }
 
 /*-------------------------------------------------------------------*/
@@ -343,7 +323,11 @@ MonitorClient::handleTimer()
 {
     M_waited_msec += POLL_INTERVAL_MS;
 
-    //std::cerr << "handleTimer waited = " << M_waited_msec << std::endl;
+     if (M_waited_msec % 5000 == 0)
+     {
+        std::cerr << "handleTimer waited = " << M_waited_msec << std::endl;
+     }
+    //sendDispInit();
 
     if ( Options::instance().bufferingMode() )
     {
@@ -374,6 +358,7 @@ MonitorClient::handleTimer()
     }
     else if ( M_waited_msec >= 500 * 1000 )
     {
+        std::cerr << "MonitorClient::handleTimer() waited=" << M_waited_msec << "[ms] and emmited disconnection";
         emit disconnectRequested();
     }
 }
@@ -389,11 +374,14 @@ MonitorClient::sendCommand( const std::string & com )
     {
         return;
     }
-
-    M_socket->writeDatagram( com.c_str(), com.length() + 1,
+    std::cerr << "MonitorClient::sendCommand "<< com << std::endl;
+    qint64 bytesWritten = M_socket->write( com.c_str(), com.length() + 1/*,
                              M_server_addr,
-                             M_server_port );
-    std::cerr << "send: " << com << std::endl;
+                             M_server_port*/ );
+//    qint64 bytesWritten = M_socket->writeDatagram( com.c_str(), com.length() + 1,
+//                             M_server_addr,
+//                             M_server_port );
+    std::cerr << "send: " << com << ", bytes written: " << bytesWritten << std::endl;
 }
 
 /*-------------------------------------------------------------------*/
